<?xml version="1.0" encoding="UTF-8"?>


<configuration scan="true" scanPeriod="60 seconds" >

	<!-- appender 는 출력설정입니다 -->
 	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
        	<charset>UTF-8</charset>
            <pattern>%d %5p | %m | %-15logger{15} %n</pattern>
        </encoder>
    </appender>
    
    
    
	<!-- log 가 많아지면 file 하나당 최대 용량 제한도 있고, 
	로그를 파악하기도 어렵습니다. 이때는 대부분 날짜 기준으로 file을 남깁니다. 
	따로 crontab으로 매일 file을 rename해서 처리할 수도 있지만, 
	logback은 RollingFileAppender로 처리할 수 있습니다. -->
	<appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${user.dir}/log/Error.log</file>
        <!--  append - If true will append to fileName. Otherwise will truncate fileName. -->
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>
                ${user.dir}/log/Error/Error%d{yyyyMMdd}.%i.log.zip
            </fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>7</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d %5p | %m | %-15logger{15} %n</pattern>
        </encoder>
    </appender>
    
    
    <!-- 
    SiftingAppender - 유저 세션에 따라 로깅 이벤트를 분리할 수 있다. 이러한 방법을 이용하면 각 유저별로 하나씩의 로그 파일을 생성할 수 있다.
	출처: http://opennote46.tistory.com/170 [욱'S 노트]
     -->
    <appender name="MAIN_LOG" class="ch.qos.logback.classic.sift.SiftingAppender">
	    <discriminator>
			<key>AVI</key>
	      	<defaultValue>ServerLog</defaultValue>
	    </discriminator>
    	<sift>
      		<appender name="MAIN_LOG-${AVI}" class="ch.qos.logback.core.rolling.RollingFileAppender">
        		<file>${user.dir}/log/${AVI}.log</file>        		
        		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
          			<fileNamePattern>${user.dir}/log/${AVI}/${AVI}_%d{yyyy-MM-dd}.%i.log.zip</fileNamePattern>
		  			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
               			<maxFileSize>10MB</maxFileSize>
           			</timeBasedFileNamingAndTriggeringPolicy>
          			<maxHistory>7</maxHistory>
        		</rollingPolicy>
        		<encoder>
        			<pattern>%d %5p | %m | %-15logger{15} %n</pattern>
        		</encoder>
      		</appender>
    	</sift>
  	</appender>
    
    <!-- <logger> 
    주의 : 순서의 영향을 받습니다. 반드시 appender-ref 의 값에 나오는 <appender/> 보다 뒤쪽에 작성
    level
		ALL : TRACE와 같음 나중에 확장을 위한것으로 보임.
		TRACE : TRACE, DEBUG, INFO, WARN, ERROR
		DEBUG : DEBUG, INFO, WARN, ERROR
		INFO : INFO, WARN, ERROR
		WARN : WARN, ERROR
		ERROR : ERROR
		OFF : 출력하지 않음
     -->
     <logger name="com">
        <level value="debug" />
        <appender-ref ref="CONSOLE" />        
        <appender-ref ref="MAIN_LOG" />
    </logger>
    
</configuration>
